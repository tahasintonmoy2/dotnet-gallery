//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


namespace WinUi
{
    public partial class App : global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
        private global::WinUi.WinUi_XamlTypeInfo.XamlMetaDataProvider __appProvider;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::WinUi.WinUi_XamlTypeInfo.XamlMetaDataProvider _AppProvider
        {
            get
            {
                if (__appProvider == null)
                {
                    __appProvider = new global::WinUi.WinUi_XamlTypeInfo.XamlMetaDataProvider();
                }
                return __appProvider;
            }
        }

        /// <summary>
        /// GetXamlType(Type)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            return _AppProvider.GetXamlType(type);
        }

        /// <summary>
        /// GetXamlType(String)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            return _AppProvider.GetXamlType(fullName);
        }

        /// <summary>
        /// GetXmlnsDefinitions()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return _AppProvider.GetXmlnsDefinitions();
        }
    }
}

namespace WinUi.WinUi_XamlTypeInfo
{
    /// <summary>
    /// Main class for providing metadata for the app or library
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed class XamlMetaDataProvider : global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider
    {
        private global::WinUi.WinUi_XamlTypeInfo.XamlTypeInfoProvider _provider = null;

        private global::WinUi.WinUi_XamlTypeInfo.XamlTypeInfoProvider Provider
        {
            get
            {
                if (_provider == null)
                {
                    _provider = new global::WinUi.WinUi_XamlTypeInfo.XamlTypeInfoProvider();
                }
                return _provider;
            }
        }

        /// <summary>
        /// GetXamlType(Type)
        /// </summary>
        [global::Windows.Foundation.Metadata.DefaultOverload]
        public global::Microsoft.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            return Provider.GetXamlTypeByType(type);
        }

        /// <summary>
        /// GetXamlType(String)
        /// </summary>
        public global::Microsoft.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            return Provider.GetXamlTypeByName(fullName);
        }

        /// <summary>
        /// GetXmlnsDefinitions()
        /// </summary>
        public global::Microsoft.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Microsoft.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Microsoft.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            global::Microsoft.UI.Xaml.Markup.IXamlType xamlType;
            lock (_xamlTypeCacheByType) 
            { 
                if (_xamlTypeCacheByType.TryGetValue(type, out xamlType))
                {
                    return xamlType;
                }
                int typeIndex = LookupTypeIndexByType(type);
                if(typeIndex != -1)
                {
                    xamlType = CreateXamlType(typeIndex);
                }
                var userXamlType = xamlType as global::WinUi.WinUi_XamlTypeInfo.XamlUserType;
                if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
                {
                    global::Microsoft.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForType(type);
                    if (libXamlType != null)
                    {
                        if(libXamlType.IsConstructible || xamlType == null)
                        {
                            xamlType = libXamlType;
                        }
                    }
                }
                if (xamlType != null)
                {
                    _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                    _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
                }
            }
            return xamlType;
        }

        public global::Microsoft.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (string.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Microsoft.UI.Xaml.Markup.IXamlType xamlType;
            lock (_xamlTypeCacheByType)
            {
                if (_xamlTypeCacheByName.TryGetValue(typeName, out xamlType))
                {
                    return xamlType;
                }
                int typeIndex = LookupTypeIndexByName(typeName);
                if(typeIndex != -1)
                {
                    xamlType = CreateXamlType(typeIndex);
                }
                var userXamlType = xamlType as global::WinUi.WinUi_XamlTypeInfo.XamlUserType;
                if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
                {
                    global::Microsoft.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForName(typeName);
                    if (libXamlType != null)
                    {
                        if(libXamlType.IsConstructible || xamlType == null)
                        {
                            xamlType = libXamlType;
                        }
                    }
                }
                if (xamlType != null)
                {
                    _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                    _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
                }
            }
            return xamlType;
        }

        public global::Microsoft.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (string.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Microsoft.UI.Xaml.Markup.IXamlMember xamlMember;
            lock (_xamlMembers)
            {
                if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
                {
                    return xamlMember;
                }
                xamlMember = CreateXamlMember(longMemberName);
                if (xamlMember != null)
                {
                    _xamlMembers.Add(longMemberName, xamlMember);
                }
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Microsoft.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByName = new global::System.Collections.Generic.Dictionary<string, global::Microsoft.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<global::System.Type, global::Microsoft.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByType = new global::System.Collections.Generic.Dictionary<global::System.Type, global::Microsoft.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<string, global::Microsoft.UI.Xaml.Markup.IXamlMember>
                _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Microsoft.UI.Xaml.Markup.IXamlMember>();

        string[] _typeNameTable = null;
        global::System.Type[] _typeTable = null;

        private void InitTypeTables()
        {
            _typeNameTable = new string[31];
            _typeNameTable[0] = "Microsoft.UI.Xaml.Controls.XamlControlsResources";
            _typeNameTable[1] = "Microsoft.UI.Xaml.ResourceDictionary";
            _typeNameTable[2] = "Object";
            _typeNameTable[3] = "Boolean";
            _typeNameTable[4] = "Microsoft.UI.Xaml.Controls.InfoBar";
            _typeNameTable[5] = "Microsoft.UI.Xaml.Controls.Control";
            _typeNameTable[6] = "Microsoft.UI.Xaml.Controls.InfoBarSeverity";
            _typeNameTable[7] = "System.Enum";
            _typeNameTable[8] = "System.ValueType";
            _typeNameTable[9] = "String";
            _typeNameTable[10] = "Microsoft.UI.Xaml.Controls.Primitives.ButtonBase";
            _typeNameTable[11] = "System.Windows.Input.ICommand";
            _typeNameTable[12] = "Microsoft.UI.Xaml.Style";
            _typeNameTable[13] = "Microsoft.UI.Xaml.DataTemplate";
            _typeNameTable[14] = "Microsoft.UI.Xaml.Controls.IconSource";
            _typeNameTable[15] = "Microsoft.UI.Xaml.Controls.InfoBarTemplateSettings";
            _typeNameTable[16] = "Microsoft.UI.Xaml.DependencyObject";
            _typeNameTable[17] = "Microsoft.UI.Xaml.Controls.UniformGridLayout";
            _typeNameTable[18] = "Microsoft.UI.Xaml.Controls.VirtualizingLayout";
            _typeNameTable[19] = "Microsoft.UI.Xaml.Controls.Layout";
            _typeNameTable[20] = "Double";
            _typeNameTable[21] = "Microsoft.UI.Xaml.Controls.UniformGridLayoutItemsJustification";
            _typeNameTable[22] = "Microsoft.UI.Xaml.Controls.UniformGridLayoutItemsStretch";
            _typeNameTable[23] = "Int32";
            _typeNameTable[24] = "Microsoft.UI.Xaml.Controls.Orientation";
            _typeNameTable[25] = "Microsoft.UI.Xaml.Controls.ItemsRepeater";
            _typeNameTable[26] = "Microsoft.UI.Xaml.FrameworkElement";
            _typeNameTable[27] = "Microsoft.UI.Xaml.Media.Brush";
            _typeNameTable[28] = "Microsoft.UI.Xaml.Controls.ItemsSourceView";
            _typeNameTable[29] = "WinUi.MainWindow";
            _typeNameTable[30] = "Microsoft.UI.Xaml.Window";

            _typeTable = new global::System.Type[31];
            _typeTable[0] = typeof(global::Microsoft.UI.Xaml.Controls.XamlControlsResources);
            _typeTable[1] = typeof(global::Microsoft.UI.Xaml.ResourceDictionary);
            _typeTable[2] = typeof(global::System.Object);
            _typeTable[3] = typeof(global::System.Boolean);
            _typeTable[4] = typeof(global::Microsoft.UI.Xaml.Controls.InfoBar);
            _typeTable[5] = typeof(global::Microsoft.UI.Xaml.Controls.Control);
            _typeTable[6] = typeof(global::Microsoft.UI.Xaml.Controls.InfoBarSeverity);
            _typeTable[7] = typeof(global::System.Enum);
            _typeTable[8] = typeof(global::System.ValueType);
            _typeTable[9] = typeof(global::System.String);
            _typeTable[10] = typeof(global::Microsoft.UI.Xaml.Controls.Primitives.ButtonBase);
            _typeTable[11] = typeof(global::System.Windows.Input.ICommand);
            _typeTable[12] = typeof(global::Microsoft.UI.Xaml.Style);
            _typeTable[13] = typeof(global::Microsoft.UI.Xaml.DataTemplate);
            _typeTable[14] = typeof(global::Microsoft.UI.Xaml.Controls.IconSource);
            _typeTable[15] = typeof(global::Microsoft.UI.Xaml.Controls.InfoBarTemplateSettings);
            _typeTable[16] = typeof(global::Microsoft.UI.Xaml.DependencyObject);
            _typeTable[17] = typeof(global::Microsoft.UI.Xaml.Controls.UniformGridLayout);
            _typeTable[18] = typeof(global::Microsoft.UI.Xaml.Controls.VirtualizingLayout);
            _typeTable[19] = typeof(global::Microsoft.UI.Xaml.Controls.Layout);
            _typeTable[20] = typeof(global::System.Double);
            _typeTable[21] = typeof(global::Microsoft.UI.Xaml.Controls.UniformGridLayoutItemsJustification);
            _typeTable[22] = typeof(global::Microsoft.UI.Xaml.Controls.UniformGridLayoutItemsStretch);
            _typeTable[23] = typeof(global::System.Int32);
            _typeTable[24] = typeof(global::Microsoft.UI.Xaml.Controls.Orientation);
            _typeTable[25] = typeof(global::Microsoft.UI.Xaml.Controls.ItemsRepeater);
            _typeTable[26] = typeof(global::Microsoft.UI.Xaml.FrameworkElement);
            _typeTable[27] = typeof(global::Microsoft.UI.Xaml.Media.Brush);
            _typeTable[28] = typeof(global::Microsoft.UI.Xaml.Controls.ItemsSourceView);
            _typeTable[29] = typeof(global::WinUi.MainWindow);
            _typeTable[30] = typeof(global::Microsoft.UI.Xaml.Window);
        }

        private int LookupTypeIndexByName(string typeName)
        {
            if (_typeNameTable == null)
            {
                InitTypeTables();
            }
            for (int i=0; i<_typeNameTable.Length; i++)
            {
                if(0 == string.CompareOrdinal(_typeNameTable[i], typeName))
                {
                    return i;
                }
            }
            return -1;
        }

        private int LookupTypeIndexByType(global::System.Type type)
        {
            if (_typeTable == null)
            {
                InitTypeTables();
            }
            for(int i=0; i<_typeTable.Length; i++)
            {
                if(type == _typeTable[i])
                {
                    return i;
                }
            }
            return -1;
        }

        private object Activate_0_XamlControlsResources() { return new global::Microsoft.UI.Xaml.Controls.XamlControlsResources(); }
        private object Activate_4_InfoBar() { return new global::Microsoft.UI.Xaml.Controls.InfoBar(); }
        private object Activate_15_InfoBarTemplateSettings() { return new global::Microsoft.UI.Xaml.Controls.InfoBarTemplateSettings(); }
        private object Activate_17_UniformGridLayout() { return new global::Microsoft.UI.Xaml.Controls.UniformGridLayout(); }
        private object Activate_18_VirtualizingLayout() { return new global::Microsoft.UI.Xaml.Controls.VirtualizingLayout(); }
        private object Activate_25_ItemsRepeater() { return new global::Microsoft.UI.Xaml.Controls.ItemsRepeater(); }
        private object Activate_29_MainWindow() { return new global::WinUi.MainWindow(); }
        private void MapAdd_0_XamlControlsResources(object instance, object key, object item)
        {
            var collection = (global::System.Collections.Generic.IDictionary<global::System.Object, global::System.Object>)instance;
            var newKey = (global::System.Object)key;
            var newItem = (global::System.Object)item;
            collection.Add(newKey, newItem);
        }

        private global::Microsoft.UI.Xaml.Markup.IXamlType CreateXamlType(int typeIndex)
        {
            global::WinUi.WinUi_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::WinUi.WinUi_XamlTypeInfo.XamlUserType userType;
            string typeName = _typeNameTable[typeIndex];
            global::System.Type type = _typeTable[typeIndex];

            switch (typeIndex)
            {

            case 0:   //  Microsoft.UI.Xaml.Controls.XamlControlsResources
                userType = new global::WinUi.WinUi_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.ResourceDictionary"));
                userType.Activator = Activate_0_XamlControlsResources;
                userType.DictionaryAdd = MapAdd_0_XamlControlsResources;
                userType.AddMemberName("UseCompactResources");
                xamlType = userType;
                break;

            case 1:   //  Microsoft.UI.Xaml.ResourceDictionary
                xamlType = new global::WinUi.WinUi_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 2:   //  Object
                xamlType = new global::WinUi.WinUi_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 3:   //  Boolean
                xamlType = new global::WinUi.WinUi_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 4:   //  Microsoft.UI.Xaml.Controls.InfoBar
                userType = new global::WinUi.WinUi_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_4_InfoBar;
                userType.SetContentPropertyName("Microsoft.UI.Xaml.Controls.InfoBar.Content");
                userType.AddMemberName("Content");
                userType.AddMemberName("IsOpen");
                userType.AddMemberName("Severity");
                userType.AddMemberName("Title");
                userType.AddMemberName("ActionButton");
                userType.AddMemberName("CloseButtonCommand");
                userType.AddMemberName("CloseButtonCommandParameter");
                userType.AddMemberName("CloseButtonStyle");
                userType.AddMemberName("ContentTemplate");
                userType.AddMemberName("IconSource");
                userType.AddMemberName("IsClosable");
                userType.AddMemberName("IsIconVisible");
                userType.AddMemberName("Message");
                userType.AddMemberName("TemplateSettings");
                xamlType = userType;
                break;

            case 5:   //  Microsoft.UI.Xaml.Controls.Control
                xamlType = new global::WinUi.WinUi_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 6:   //  Microsoft.UI.Xaml.Controls.InfoBarSeverity
                userType = new global::WinUi.WinUi_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Informational", global::Microsoft.UI.Xaml.Controls.InfoBarSeverity.Informational);
                userType.AddEnumValue("Success", global::Microsoft.UI.Xaml.Controls.InfoBarSeverity.Success);
                userType.AddEnumValue("Warning", global::Microsoft.UI.Xaml.Controls.InfoBarSeverity.Warning);
                userType.AddEnumValue("Error", global::Microsoft.UI.Xaml.Controls.InfoBarSeverity.Error);
                xamlType = userType;
                break;

            case 7:   //  System.Enum
                userType = new global::WinUi.WinUi_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                xamlType = userType;
                break;

            case 8:   //  System.ValueType
                userType = new global::WinUi.WinUi_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 9:   //  String
                xamlType = new global::WinUi.WinUi_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 10:   //  Microsoft.UI.Xaml.Controls.Primitives.ButtonBase
                xamlType = new global::WinUi.WinUi_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 11:   //  System.Windows.Input.ICommand
                userType = new global::WinUi.WinUi_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 12:   //  Microsoft.UI.Xaml.Style
                xamlType = new global::WinUi.WinUi_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 13:   //  Microsoft.UI.Xaml.DataTemplate
                xamlType = new global::WinUi.WinUi_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 14:   //  Microsoft.UI.Xaml.Controls.IconSource
                xamlType = new global::WinUi.WinUi_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 15:   //  Microsoft.UI.Xaml.Controls.InfoBarTemplateSettings
                userType = new global::WinUi.WinUi_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.DependencyObject"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 16:   //  Microsoft.UI.Xaml.DependencyObject
                xamlType = new global::WinUi.WinUi_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 17:   //  Microsoft.UI.Xaml.Controls.UniformGridLayout
                userType = new global::WinUi.WinUi_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.VirtualizingLayout"));
                userType.Activator = Activate_17_UniformGridLayout;
                userType.AddMemberName("MinRowSpacing");
                userType.AddMemberName("MinColumnSpacing");
                userType.AddMemberName("ItemsJustification");
                userType.AddMemberName("ItemsStretch");
                userType.AddMemberName("MaximumRowsOrColumns");
                userType.AddMemberName("MinItemHeight");
                userType.AddMemberName("MinItemWidth");
                userType.AddMemberName("Orientation");
                xamlType = userType;
                break;

            case 18:   //  Microsoft.UI.Xaml.Controls.VirtualizingLayout
                userType = new global::WinUi.WinUi_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Layout"));
                userType.Activator = Activate_18_VirtualizingLayout;
                xamlType = userType;
                break;

            case 19:   //  Microsoft.UI.Xaml.Controls.Layout
                userType = new global::WinUi.WinUi_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.DependencyObject"));
                xamlType = userType;
                break;

            case 20:   //  Double
                xamlType = new global::WinUi.WinUi_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 21:   //  Microsoft.UI.Xaml.Controls.UniformGridLayoutItemsJustification
                userType = new global::WinUi.WinUi_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Start", global::Microsoft.UI.Xaml.Controls.UniformGridLayoutItemsJustification.Start);
                userType.AddEnumValue("Center", global::Microsoft.UI.Xaml.Controls.UniformGridLayoutItemsJustification.Center);
                userType.AddEnumValue("End", global::Microsoft.UI.Xaml.Controls.UniformGridLayoutItemsJustification.End);
                userType.AddEnumValue("SpaceAround", global::Microsoft.UI.Xaml.Controls.UniformGridLayoutItemsJustification.SpaceAround);
                userType.AddEnumValue("SpaceBetween", global::Microsoft.UI.Xaml.Controls.UniformGridLayoutItemsJustification.SpaceBetween);
                userType.AddEnumValue("SpaceEvenly", global::Microsoft.UI.Xaml.Controls.UniformGridLayoutItemsJustification.SpaceEvenly);
                xamlType = userType;
                break;

            case 22:   //  Microsoft.UI.Xaml.Controls.UniformGridLayoutItemsStretch
                userType = new global::WinUi.WinUi_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("None", global::Microsoft.UI.Xaml.Controls.UniformGridLayoutItemsStretch.None);
                userType.AddEnumValue("Fill", global::Microsoft.UI.Xaml.Controls.UniformGridLayoutItemsStretch.Fill);
                userType.AddEnumValue("Uniform", global::Microsoft.UI.Xaml.Controls.UniformGridLayoutItemsStretch.Uniform);
                xamlType = userType;
                break;

            case 23:   //  Int32
                xamlType = new global::WinUi.WinUi_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 24:   //  Microsoft.UI.Xaml.Controls.Orientation
                xamlType = new global::WinUi.WinUi_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 25:   //  Microsoft.UI.Xaml.Controls.ItemsRepeater
                userType = new global::WinUi.WinUi_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.FrameworkElement"));
                userType.Activator = Activate_25_ItemsRepeater;
                userType.SetContentPropertyName("Microsoft.UI.Xaml.Controls.ItemsRepeater.ItemTemplate");
                userType.AddMemberName("ItemTemplate");
                userType.AddMemberName("ItemsSource");
                userType.AddMemberName("Layout");
                userType.AddMemberName("Background");
                userType.AddMemberName("HorizontalCacheLength");
                userType.AddMemberName("ItemsSourceView");
                userType.AddMemberName("VerticalCacheLength");
                xamlType = userType;
                break;

            case 26:   //  Microsoft.UI.Xaml.FrameworkElement
                xamlType = new global::WinUi.WinUi_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 27:   //  Microsoft.UI.Xaml.Media.Brush
                xamlType = new global::WinUi.WinUi_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 28:   //  Microsoft.UI.Xaml.Controls.ItemsSourceView
                userType = new global::WinUi.WinUi_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 29:   //  WinUi.MainWindow
                userType = new global::WinUi.WinUi_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Window"));
                userType.Activator = Activate_29_MainWindow;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 30:   //  Microsoft.UI.Xaml.Window
                xamlType = new global::WinUi.WinUi_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;
            }
            return xamlType;
        }

        private global::System.Collections.Generic.List<global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider> _otherProviders;
        private global::System.Collections.Generic.List<global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider> OtherProviders
        {
            get
            {
                if(_otherProviders == null)
                {
                    var otherProviders = new global::System.Collections.Generic.List<global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider>();
                    global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider provider;
                    provider = new global::Microsoft.UI.Xaml.XamlTypeInfo.XamlControlsXamlMetaDataProvider() as global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    _otherProviders = otherProviders;
                }
                return _otherProviders;
            }
        }

        private global::Microsoft.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForName(string typeName)
        {
            global::Microsoft.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Microsoft.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(typeName);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private global::Microsoft.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForType(global::System.Type type)
        {
            global::Microsoft.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Microsoft.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(type);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private object get_0_XamlControlsResources_UseCompactResources(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.XamlControlsResources)instance;
            return that.UseCompactResources;
        }
        private void set_0_XamlControlsResources_UseCompactResources(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.XamlControlsResources)instance;
            that.UseCompactResources = (global::System.Boolean)Value;
        }
        private object get_1_InfoBar_Content(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.InfoBar)instance;
            return that.Content;
        }
        private void set_1_InfoBar_Content(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.InfoBar)instance;
            that.Content = (global::System.Object)Value;
        }
        private object get_2_InfoBar_IsOpen(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.InfoBar)instance;
            return that.IsOpen;
        }
        private void set_2_InfoBar_IsOpen(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.InfoBar)instance;
            that.IsOpen = (global::System.Boolean)Value;
        }
        private object get_3_InfoBar_Severity(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.InfoBar)instance;
            return that.Severity;
        }
        private void set_3_InfoBar_Severity(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.InfoBar)instance;
            that.Severity = (global::Microsoft.UI.Xaml.Controls.InfoBarSeverity)Value;
        }
        private object get_4_InfoBar_Title(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.InfoBar)instance;
            return that.Title;
        }
        private void set_4_InfoBar_Title(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.InfoBar)instance;
            that.Title = (global::System.String)Value;
        }
        private object get_5_InfoBar_ActionButton(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.InfoBar)instance;
            return that.ActionButton;
        }
        private void set_5_InfoBar_ActionButton(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.InfoBar)instance;
            that.ActionButton = (global::Microsoft.UI.Xaml.Controls.Primitives.ButtonBase)Value;
        }
        private object get_6_InfoBar_CloseButtonCommand(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.InfoBar)instance;
            return that.CloseButtonCommand;
        }
        private void set_6_InfoBar_CloseButtonCommand(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.InfoBar)instance;
            that.CloseButtonCommand = (global::System.Windows.Input.ICommand)Value;
        }
        private object get_7_InfoBar_CloseButtonCommandParameter(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.InfoBar)instance;
            return that.CloseButtonCommandParameter;
        }
        private void set_7_InfoBar_CloseButtonCommandParameter(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.InfoBar)instance;
            that.CloseButtonCommandParameter = (global::System.Object)Value;
        }
        private object get_8_InfoBar_CloseButtonStyle(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.InfoBar)instance;
            return that.CloseButtonStyle;
        }
        private void set_8_InfoBar_CloseButtonStyle(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.InfoBar)instance;
            that.CloseButtonStyle = (global::Microsoft.UI.Xaml.Style)Value;
        }
        private object get_9_InfoBar_ContentTemplate(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.InfoBar)instance;
            return that.ContentTemplate;
        }
        private void set_9_InfoBar_ContentTemplate(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.InfoBar)instance;
            that.ContentTemplate = (global::Microsoft.UI.Xaml.DataTemplate)Value;
        }
        private object get_10_InfoBar_IconSource(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.InfoBar)instance;
            return that.IconSource;
        }
        private void set_10_InfoBar_IconSource(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.InfoBar)instance;
            that.IconSource = (global::Microsoft.UI.Xaml.Controls.IconSource)Value;
        }
        private object get_11_InfoBar_IsClosable(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.InfoBar)instance;
            return that.IsClosable;
        }
        private void set_11_InfoBar_IsClosable(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.InfoBar)instance;
            that.IsClosable = (global::System.Boolean)Value;
        }
        private object get_12_InfoBar_IsIconVisible(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.InfoBar)instance;
            return that.IsIconVisible;
        }
        private void set_12_InfoBar_IsIconVisible(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.InfoBar)instance;
            that.IsIconVisible = (global::System.Boolean)Value;
        }
        private object get_13_InfoBar_Message(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.InfoBar)instance;
            return that.Message;
        }
        private void set_13_InfoBar_Message(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.InfoBar)instance;
            that.Message = (global::System.String)Value;
        }
        private object get_14_InfoBar_TemplateSettings(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.InfoBar)instance;
            return that.TemplateSettings;
        }
        private object get_15_UniformGridLayout_MinRowSpacing(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.UniformGridLayout)instance;
            return that.MinRowSpacing;
        }
        private void set_15_UniformGridLayout_MinRowSpacing(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.UniformGridLayout)instance;
            that.MinRowSpacing = (global::System.Double)Value;
        }
        private object get_16_UniformGridLayout_MinColumnSpacing(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.UniformGridLayout)instance;
            return that.MinColumnSpacing;
        }
        private void set_16_UniformGridLayout_MinColumnSpacing(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.UniformGridLayout)instance;
            that.MinColumnSpacing = (global::System.Double)Value;
        }
        private object get_17_UniformGridLayout_ItemsJustification(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.UniformGridLayout)instance;
            return that.ItemsJustification;
        }
        private void set_17_UniformGridLayout_ItemsJustification(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.UniformGridLayout)instance;
            that.ItemsJustification = (global::Microsoft.UI.Xaml.Controls.UniformGridLayoutItemsJustification)Value;
        }
        private object get_18_UniformGridLayout_ItemsStretch(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.UniformGridLayout)instance;
            return that.ItemsStretch;
        }
        private void set_18_UniformGridLayout_ItemsStretch(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.UniformGridLayout)instance;
            that.ItemsStretch = (global::Microsoft.UI.Xaml.Controls.UniformGridLayoutItemsStretch)Value;
        }
        private object get_19_UniformGridLayout_MaximumRowsOrColumns(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.UniformGridLayout)instance;
            return that.MaximumRowsOrColumns;
        }
        private void set_19_UniformGridLayout_MaximumRowsOrColumns(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.UniformGridLayout)instance;
            that.MaximumRowsOrColumns = (global::System.Int32)Value;
        }
        private object get_20_UniformGridLayout_MinItemHeight(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.UniformGridLayout)instance;
            return that.MinItemHeight;
        }
        private void set_20_UniformGridLayout_MinItemHeight(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.UniformGridLayout)instance;
            that.MinItemHeight = (global::System.Double)Value;
        }
        private object get_21_UniformGridLayout_MinItemWidth(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.UniformGridLayout)instance;
            return that.MinItemWidth;
        }
        private void set_21_UniformGridLayout_MinItemWidth(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.UniformGridLayout)instance;
            that.MinItemWidth = (global::System.Double)Value;
        }
        private object get_22_UniformGridLayout_Orientation(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.UniformGridLayout)instance;
            return that.Orientation;
        }
        private void set_22_UniformGridLayout_Orientation(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.UniformGridLayout)instance;
            that.Orientation = (global::Microsoft.UI.Xaml.Controls.Orientation)Value;
        }
        private object get_23_ItemsRepeater_ItemTemplate(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ItemsRepeater)instance;
            return that.ItemTemplate;
        }
        private void set_23_ItemsRepeater_ItemTemplate(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ItemsRepeater)instance;
            that.ItemTemplate = (global::System.Object)Value;
        }
        private object get_24_ItemsRepeater_ItemsSource(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ItemsRepeater)instance;
            return that.ItemsSource;
        }
        private void set_24_ItemsRepeater_ItemsSource(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ItemsRepeater)instance;
            that.ItemsSource = (global::System.Object)Value;
        }
        private object get_25_ItemsRepeater_Layout(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ItemsRepeater)instance;
            return that.Layout;
        }
        private void set_25_ItemsRepeater_Layout(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ItemsRepeater)instance;
            that.Layout = (global::Microsoft.UI.Xaml.Controls.Layout)Value;
        }
        private object get_26_ItemsRepeater_Background(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ItemsRepeater)instance;
            return that.Background;
        }
        private void set_26_ItemsRepeater_Background(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ItemsRepeater)instance;
            that.Background = (global::Microsoft.UI.Xaml.Media.Brush)Value;
        }
        private object get_27_ItemsRepeater_HorizontalCacheLength(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ItemsRepeater)instance;
            return that.HorizontalCacheLength;
        }
        private void set_27_ItemsRepeater_HorizontalCacheLength(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ItemsRepeater)instance;
            that.HorizontalCacheLength = (global::System.Double)Value;
        }
        private object get_28_ItemsRepeater_ItemsSourceView(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ItemsRepeater)instance;
            return that.ItemsSourceView;
        }
        private object get_29_ItemsRepeater_VerticalCacheLength(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ItemsRepeater)instance;
            return that.VerticalCacheLength;
        }
        private void set_29_ItemsRepeater_VerticalCacheLength(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ItemsRepeater)instance;
            that.VerticalCacheLength = (global::System.Double)Value;
        }

        private global::Microsoft.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::WinUi.WinUi_XamlTypeInfo.XamlMember xamlMember = null;
            global::WinUi.WinUi_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "Microsoft.UI.Xaml.Controls.XamlControlsResources.UseCompactResources":
                userType = (global::WinUi.WinUi_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.XamlControlsResources");
                xamlMember = new global::WinUi.WinUi_XamlTypeInfo.XamlMember(this, "UseCompactResources", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_0_XamlControlsResources_UseCompactResources;
                xamlMember.Setter = set_0_XamlControlsResources_UseCompactResources;
                break;
            case "Microsoft.UI.Xaml.Controls.InfoBar.Content":
                userType = (global::WinUi.WinUi_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.InfoBar");
                xamlMember = new global::WinUi.WinUi_XamlTypeInfo.XamlMember(this, "Content", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_1_InfoBar_Content;
                xamlMember.Setter = set_1_InfoBar_Content;
                break;
            case "Microsoft.UI.Xaml.Controls.InfoBar.IsOpen":
                userType = (global::WinUi.WinUi_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.InfoBar");
                xamlMember = new global::WinUi.WinUi_XamlTypeInfo.XamlMember(this, "IsOpen", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_2_InfoBar_IsOpen;
                xamlMember.Setter = set_2_InfoBar_IsOpen;
                break;
            case "Microsoft.UI.Xaml.Controls.InfoBar.Severity":
                userType = (global::WinUi.WinUi_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.InfoBar");
                xamlMember = new global::WinUi.WinUi_XamlTypeInfo.XamlMember(this, "Severity", "Microsoft.UI.Xaml.Controls.InfoBarSeverity");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_3_InfoBar_Severity;
                xamlMember.Setter = set_3_InfoBar_Severity;
                break;
            case "Microsoft.UI.Xaml.Controls.InfoBar.Title":
                userType = (global::WinUi.WinUi_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.InfoBar");
                xamlMember = new global::WinUi.WinUi_XamlTypeInfo.XamlMember(this, "Title", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_4_InfoBar_Title;
                xamlMember.Setter = set_4_InfoBar_Title;
                break;
            case "Microsoft.UI.Xaml.Controls.InfoBar.ActionButton":
                userType = (global::WinUi.WinUi_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.InfoBar");
                xamlMember = new global::WinUi.WinUi_XamlTypeInfo.XamlMember(this, "ActionButton", "Microsoft.UI.Xaml.Controls.Primitives.ButtonBase");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_5_InfoBar_ActionButton;
                xamlMember.Setter = set_5_InfoBar_ActionButton;
                break;
            case "Microsoft.UI.Xaml.Controls.InfoBar.CloseButtonCommand":
                userType = (global::WinUi.WinUi_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.InfoBar");
                xamlMember = new global::WinUi.WinUi_XamlTypeInfo.XamlMember(this, "CloseButtonCommand", "System.Windows.Input.ICommand");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_6_InfoBar_CloseButtonCommand;
                xamlMember.Setter = set_6_InfoBar_CloseButtonCommand;
                break;
            case "Microsoft.UI.Xaml.Controls.InfoBar.CloseButtonCommandParameter":
                userType = (global::WinUi.WinUi_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.InfoBar");
                xamlMember = new global::WinUi.WinUi_XamlTypeInfo.XamlMember(this, "CloseButtonCommandParameter", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_7_InfoBar_CloseButtonCommandParameter;
                xamlMember.Setter = set_7_InfoBar_CloseButtonCommandParameter;
                break;
            case "Microsoft.UI.Xaml.Controls.InfoBar.CloseButtonStyle":
                userType = (global::WinUi.WinUi_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.InfoBar");
                xamlMember = new global::WinUi.WinUi_XamlTypeInfo.XamlMember(this, "CloseButtonStyle", "Microsoft.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_8_InfoBar_CloseButtonStyle;
                xamlMember.Setter = set_8_InfoBar_CloseButtonStyle;
                break;
            case "Microsoft.UI.Xaml.Controls.InfoBar.ContentTemplate":
                userType = (global::WinUi.WinUi_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.InfoBar");
                xamlMember = new global::WinUi.WinUi_XamlTypeInfo.XamlMember(this, "ContentTemplate", "Microsoft.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_9_InfoBar_ContentTemplate;
                xamlMember.Setter = set_9_InfoBar_ContentTemplate;
                break;
            case "Microsoft.UI.Xaml.Controls.InfoBar.IconSource":
                userType = (global::WinUi.WinUi_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.InfoBar");
                xamlMember = new global::WinUi.WinUi_XamlTypeInfo.XamlMember(this, "IconSource", "Microsoft.UI.Xaml.Controls.IconSource");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_10_InfoBar_IconSource;
                xamlMember.Setter = set_10_InfoBar_IconSource;
                break;
            case "Microsoft.UI.Xaml.Controls.InfoBar.IsClosable":
                userType = (global::WinUi.WinUi_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.InfoBar");
                xamlMember = new global::WinUi.WinUi_XamlTypeInfo.XamlMember(this, "IsClosable", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_11_InfoBar_IsClosable;
                xamlMember.Setter = set_11_InfoBar_IsClosable;
                break;
            case "Microsoft.UI.Xaml.Controls.InfoBar.IsIconVisible":
                userType = (global::WinUi.WinUi_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.InfoBar");
                xamlMember = new global::WinUi.WinUi_XamlTypeInfo.XamlMember(this, "IsIconVisible", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_12_InfoBar_IsIconVisible;
                xamlMember.Setter = set_12_InfoBar_IsIconVisible;
                break;
            case "Microsoft.UI.Xaml.Controls.InfoBar.Message":
                userType = (global::WinUi.WinUi_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.InfoBar");
                xamlMember = new global::WinUi.WinUi_XamlTypeInfo.XamlMember(this, "Message", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_13_InfoBar_Message;
                xamlMember.Setter = set_13_InfoBar_Message;
                break;
            case "Microsoft.UI.Xaml.Controls.InfoBar.TemplateSettings":
                userType = (global::WinUi.WinUi_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.InfoBar");
                xamlMember = new global::WinUi.WinUi_XamlTypeInfo.XamlMember(this, "TemplateSettings", "Microsoft.UI.Xaml.Controls.InfoBarTemplateSettings");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_14_InfoBar_TemplateSettings;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.UniformGridLayout.MinRowSpacing":
                userType = (global::WinUi.WinUi_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.UniformGridLayout");
                xamlMember = new global::WinUi.WinUi_XamlTypeInfo.XamlMember(this, "MinRowSpacing", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_15_UniformGridLayout_MinRowSpacing;
                xamlMember.Setter = set_15_UniformGridLayout_MinRowSpacing;
                break;
            case "Microsoft.UI.Xaml.Controls.UniformGridLayout.MinColumnSpacing":
                userType = (global::WinUi.WinUi_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.UniformGridLayout");
                xamlMember = new global::WinUi.WinUi_XamlTypeInfo.XamlMember(this, "MinColumnSpacing", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_16_UniformGridLayout_MinColumnSpacing;
                xamlMember.Setter = set_16_UniformGridLayout_MinColumnSpacing;
                break;
            case "Microsoft.UI.Xaml.Controls.UniformGridLayout.ItemsJustification":
                userType = (global::WinUi.WinUi_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.UniformGridLayout");
                xamlMember = new global::WinUi.WinUi_XamlTypeInfo.XamlMember(this, "ItemsJustification", "Microsoft.UI.Xaml.Controls.UniformGridLayoutItemsJustification");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_17_UniformGridLayout_ItemsJustification;
                xamlMember.Setter = set_17_UniformGridLayout_ItemsJustification;
                break;
            case "Microsoft.UI.Xaml.Controls.UniformGridLayout.ItemsStretch":
                userType = (global::WinUi.WinUi_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.UniformGridLayout");
                xamlMember = new global::WinUi.WinUi_XamlTypeInfo.XamlMember(this, "ItemsStretch", "Microsoft.UI.Xaml.Controls.UniformGridLayoutItemsStretch");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_18_UniformGridLayout_ItemsStretch;
                xamlMember.Setter = set_18_UniformGridLayout_ItemsStretch;
                break;
            case "Microsoft.UI.Xaml.Controls.UniformGridLayout.MaximumRowsOrColumns":
                userType = (global::WinUi.WinUi_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.UniformGridLayout");
                xamlMember = new global::WinUi.WinUi_XamlTypeInfo.XamlMember(this, "MaximumRowsOrColumns", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_19_UniformGridLayout_MaximumRowsOrColumns;
                xamlMember.Setter = set_19_UniformGridLayout_MaximumRowsOrColumns;
                break;
            case "Microsoft.UI.Xaml.Controls.UniformGridLayout.MinItemHeight":
                userType = (global::WinUi.WinUi_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.UniformGridLayout");
                xamlMember = new global::WinUi.WinUi_XamlTypeInfo.XamlMember(this, "MinItemHeight", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_20_UniformGridLayout_MinItemHeight;
                xamlMember.Setter = set_20_UniformGridLayout_MinItemHeight;
                break;
            case "Microsoft.UI.Xaml.Controls.UniformGridLayout.MinItemWidth":
                userType = (global::WinUi.WinUi_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.UniformGridLayout");
                xamlMember = new global::WinUi.WinUi_XamlTypeInfo.XamlMember(this, "MinItemWidth", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_21_UniformGridLayout_MinItemWidth;
                xamlMember.Setter = set_21_UniformGridLayout_MinItemWidth;
                break;
            case "Microsoft.UI.Xaml.Controls.UniformGridLayout.Orientation":
                userType = (global::WinUi.WinUi_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.UniformGridLayout");
                xamlMember = new global::WinUi.WinUi_XamlTypeInfo.XamlMember(this, "Orientation", "Microsoft.UI.Xaml.Controls.Orientation");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_22_UniformGridLayout_Orientation;
                xamlMember.Setter = set_22_UniformGridLayout_Orientation;
                break;
            case "Microsoft.UI.Xaml.Controls.ItemsRepeater.ItemTemplate":
                userType = (global::WinUi.WinUi_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ItemsRepeater");
                xamlMember = new global::WinUi.WinUi_XamlTypeInfo.XamlMember(this, "ItemTemplate", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_23_ItemsRepeater_ItemTemplate;
                xamlMember.Setter = set_23_ItemsRepeater_ItemTemplate;
                break;
            case "Microsoft.UI.Xaml.Controls.ItemsRepeater.ItemsSource":
                userType = (global::WinUi.WinUi_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ItemsRepeater");
                xamlMember = new global::WinUi.WinUi_XamlTypeInfo.XamlMember(this, "ItemsSource", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_24_ItemsRepeater_ItemsSource;
                xamlMember.Setter = set_24_ItemsRepeater_ItemsSource;
                break;
            case "Microsoft.UI.Xaml.Controls.ItemsRepeater.Layout":
                userType = (global::WinUi.WinUi_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ItemsRepeater");
                xamlMember = new global::WinUi.WinUi_XamlTypeInfo.XamlMember(this, "Layout", "Microsoft.UI.Xaml.Controls.Layout");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_25_ItemsRepeater_Layout;
                xamlMember.Setter = set_25_ItemsRepeater_Layout;
                break;
            case "Microsoft.UI.Xaml.Controls.ItemsRepeater.Background":
                userType = (global::WinUi.WinUi_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ItemsRepeater");
                xamlMember = new global::WinUi.WinUi_XamlTypeInfo.XamlMember(this, "Background", "Microsoft.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_26_ItemsRepeater_Background;
                xamlMember.Setter = set_26_ItemsRepeater_Background;
                break;
            case "Microsoft.UI.Xaml.Controls.ItemsRepeater.HorizontalCacheLength":
                userType = (global::WinUi.WinUi_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ItemsRepeater");
                xamlMember = new global::WinUi.WinUi_XamlTypeInfo.XamlMember(this, "HorizontalCacheLength", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_27_ItemsRepeater_HorizontalCacheLength;
                xamlMember.Setter = set_27_ItemsRepeater_HorizontalCacheLength;
                break;
            case "Microsoft.UI.Xaml.Controls.ItemsRepeater.ItemsSourceView":
                userType = (global::WinUi.WinUi_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ItemsRepeater");
                xamlMember = new global::WinUi.WinUi_XamlTypeInfo.XamlMember(this, "ItemsSourceView", "Microsoft.UI.Xaml.Controls.ItemsSourceView");
                xamlMember.Getter = get_28_ItemsRepeater_ItemsSourceView;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.ItemsRepeater.VerticalCacheLength":
                userType = (global::WinUi.WinUi_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ItemsRepeater");
                xamlMember = new global::WinUi.WinUi_XamlTypeInfo.XamlMember(this, "VerticalCacheLength", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_29_ItemsRepeater_VerticalCacheLength;
                xamlMember.Setter = set_29_ItemsRepeater_VerticalCacheLength;
                break;
            }
            return xamlMember;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Microsoft.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Microsoft.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Microsoft.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Microsoft.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsReturnTypeStub { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsLocalType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Microsoft.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Microsoft.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Microsoft.UI.Xaml.Markup.IXamlType BoxedType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(string input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);
    internal delegate object CreateFromStringMethod(string args);
    internal delegate object BoxInstanceMethod(object instance);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::WinUi.WinUi_XamlTypeInfo.XamlSystemBaseType
        , global::Microsoft.UI.Xaml.Markup.IXamlType
    {
        global::WinUi.WinUi_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Microsoft.UI.Xaml.Markup.IXamlType _baseType;
        global::Microsoft.UI.Xaml.Markup.IXamlType _boxedType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;
        bool _isReturnTypeStub;
        bool _isLocalType;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::WinUi.WinUi_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Microsoft.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Microsoft.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }
        override public bool IsReturnTypeStub { get { return _isReturnTypeStub; } }
        override public bool IsLocalType { get { return _isLocalType; } }
        override public global::Microsoft.UI.Xaml.Markup.IXamlType BoxedType { get { return _boxedType; } }

        override public global::Microsoft.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Microsoft.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Microsoft.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Microsoft.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public object CreateFromString(string input)
        {
            if (BoxedType != null)
            {
                return BoxInstance(BoxedType.CreateFromString(input));
            }

            if (CreateFromStringMethod != null)
            {
                return this.CreateFromStringMethod(input);
            }
            else if (_enumValues != null)
            {
                long value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    long enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt64(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt64(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( string.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt64(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(this.UnderlyingType));
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }
        public CreateFromStringMethod CreateFromStringMethod {get; set; }
        public BoxInstanceMethod BoxInstance {get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetIsReturnTypeStub()
        {
            _isReturnTypeStub = true;
        }

        public void SetIsLocalType()
        {
            _isLocalType = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void SetBoxedType(global::Microsoft.UI.Xaml.Markup.IXamlType boxedType)
        {
            _boxedType = boxedType;
        }

        public object BoxType<T>(object instance) where T: struct
        {
            T unwrapped = (T)instance;
            return new global::System.Nullable<T>(unwrapped);
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Microsoft.UI.Xaml.Markup.IXamlMember
    {
        global::WinUi.WinUi_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::WinUi.WinUi_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Microsoft.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(string targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Microsoft.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}

